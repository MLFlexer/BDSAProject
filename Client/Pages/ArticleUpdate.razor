@page "/UpdateArticle/{articleId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SETraining.Shared.DTOs
@using SETraining.Shared.ExtensionMethods
@using SETraining.Shared.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="row">
    <div class="col-12">
        <RadzenButton style="right:0px; position: absolute;" Click=@(() => Back()) Text="Go Back" ButtonStyle="ButtonStyle.Secondary" />
        <h1>Edit article</h1>
        <h4>Title</h4>
        <RadzenTextBox Value="@TitleInput" Change=@(args => OnTitleChange(args.ToString())) />
        <h4>Description</h4>
        <RadzenTextBox Value="@DescriptionInput" Change=@(args => OnDescriptionChange(args.ToString())) />

        @if (ProgrammingLanguages != null)
        {
            <div style="margin-top: 20px;">
                <h4>Choose existing languages</h4>
                <RadzenCheckBoxList @bind-Value=@ChosenLanguages TValue="int" Orientation="Orientation.Horizontal" Change=@(args => OnChooseLanguages(args))>
                    <Items>
                        @foreach (var (language, i) in ProgrammingLanguages.Select((value, i) => (value, i)))
                        {
                            <RadzenCheckBoxListItem Text="@language.Name" Value="@i"/>
                        }
                    </Items>
                </RadzenCheckBoxList>

                <div style="margin-top: 10px;">Or add new language</div>
                <RadzenTextBox Placeholder="Typescript..." Change=@(args => OnNewLanguageValue(args)) Class="w-100" />
                <RadzenButton Click=@(args => OnAddLanguage()) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            </div>
        }

        <div style="margin-top: 20px;">
            <h4>Pick difficulty level</h4>
            <RadzenRadioButtonList @bind-Value=@ChosenDifficulty TValue="int" Change=@(args => OnChosenDifficultyLevelChange(args))>
                <Items>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Novice.ToString()" Value="0"/>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Intermediate.ToString()" Value="1"/>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Expert.ToString()" Value="2"/>
                </Items>
            </RadzenRadioButtonList>
        </div>

        <div class="form-group">
            @if (!string.IsNullOrWhiteSpace(ImageURL))
            {
                <div style="margin-top: 20px;"><img src="@ImageURL" alt="Character Image" class="img-thumbnail"></div>
            }
            
            
             @if (ChosenType != 0)
             {
                 <h4 style="margin-top: 20px;">Edit image</h4>
                 <label for="Image">Image</label>  
             }
             else
             {
                 <h4 style="margin-top: 20px;">Edit thumbnail image</h4>
                 <label for="Image">Image</label>  
             }
            
        </div>
        <div class="form-group input-group">
            <InputFile id="Image" OnChange="@OnImageFileSelection" class="form-control" />
            <button type="button" @onclick="ClearImage" class="btn btn-secondary">Clear</button>
        </div>

        
        <div style="margin-top: 20px;">
             @if (ChosenType != 0)
             {
                 <h4>Content of the article</h4>
                 <RadzenHtmlEditor @bind-Value=@HtmlInput style="height: 500px; margin-bottom: 1rem;" UploadUrl="upload/image" Change=@OnHtmlChange Paste=@OnPaste />  
             }
             else
             {
                 @if (!string.IsNullOrWhiteSpace(VideoURL))
                 {
                     <div><img src="@VideoURL" alt="Character Image" class="img-thumbnail"></div>
                 }
                 <h4 style="margin-top: 20px;">Edit video</h4>
                 <label for="Image">Video</label>  
                 <div class="form-group input-group">
                     <InputFile id="Image" OnChange="@OnVideoFileSelection" class="form-control" />
                     <button type="button" @onclick="ClearVideo" class="btn btn-secondary">Clear</button>
                     </div>
             }
        </div>
        
    </div>
  
</div>
<div style="position:relative">
    <RadzenButton style="margin-bottom:10px;"Click=@(UpdateArticle) Text="Confirm Edit" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton style="margin-bottom:10px; right:0px; position: absolute ;"Click=@(DeleteArticle) Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
</div>

  
        

        

@code {
    
    //***Properties*** 
    private int ChosenType;
    private string ImageName = Guid.NewGuid().ToString();
    private string? ImageURL;
    private IBrowserFile? ImageFile;
    private readonly IReadOnlyCollection<string> AllowedImageContent = new[]
    {
        "image/gif",
        "image/jpeg",
        "image/png"
    };
    
    private string VideoName = Guid.NewGuid().ToString();
    private string? VideoURL;
    private IBrowserFile? VideoFile;

    
    string HtmlInput;
    string TitleInput;
    string DescriptionInput;
    
    bool? CheckBoxValue;
    string? NewLang;
    
    public ArticleDTO? article;
    [Parameter]
    public int ArticleId { get; set; }
    
    ProgrammingLanguageDTO[]? ProgrammingLanguages;
    IEnumerable<int> ChosenLanguages = new List<int>();
    int ChosenDifficulty;
    
    //***Methods***
    
    //Init method
    protected override async Task OnInitializedAsync()
    {
        ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
        article = await Http.GetFromJsonAsync<ArticleDTO>($"api/Article/id={ArticleId}");
        HtmlInput = article.Body;
        TitleInput = article.Title;
        ChosenType = (int) article.Type;
        DescriptionInput = article.Description;
        ChosenDifficulty = (int) article.Difficulty -1;
        LoadProgrammingLanguages();
        LoadImage();

        Console.WriteLine(ChosenType);
        if (article.Type == ArticleType.Video)
        {
            LoadVideo();
        }
    }

    void LoadProgrammingLanguages()
    {
        var ProgrammingLanguagesToStrings = ProgrammingLanguages.Select(p => p.Name).ToList();
        var temp = new List<int>();
        foreach (var l in article.ProgrammingLanguages)
        {
           var i =  ProgrammingLanguagesToStrings.IndexOf(l);
            temp.Add(i);
        }
        ChosenLanguages = temp;
    }

    private void LoadImage()
    {
        if (!string.IsNullOrWhiteSpace(article.ImageURL))
        {
            ImageURL = $"{article.ImageURL}?nocache={Guid.NewGuid()}";
            ImageName = ImageURL.Split("/").Last();
        }
    }

    //Methods for image uploads
    private async Task OnImageFileSelection(InputFileChangeEventArgs e)
    {
        ClearImage();
        
        ImageFile = e.GetMultipleFiles().FirstOrDefault();
        
        if (VideoFile.ContentType != "video/mp4")
        {
            ClearVideo();
            JSRuntime.InvokeAsync<bool>("alert", "Videos can only be in MP4 format");
        }
        
        if (!AllowedImageContent.Contains(ImageFile.ContentType))
        {
            ClearImage();
            JSRuntime.InvokeAsync<bool>("alert", "Images can only be in JPEG, PNG or GIF format");
        }

        if (ImageFile != null)
        {
            var bytes = new byte[ImageFile.Size];
            await ImageFile.OpenReadStream(100000000).ReadAsync(bytes);
            var contentType = ImageFile.ContentType;
            ImageURL = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";

        }
    }
    
    private async Task UploadImage()
    {
    //IMAGE UPLOAD 
        
        if (ImageFile != null)
        {
            var bytes = new byte[ImageFile.Size];
            await ImageFile.OpenReadStream(100000000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", ImageFile.Name);
            var response = await Http.PostAsync($"api/ImageUpload/{ImageName}", content);

            if (response.IsSuccessStatusCode)
            {
                ImageURL = response.Headers.Location?.ToString();
                Console.WriteLine(ImageURL);
            }
            else
            {
                Console.WriteLine(response);
            }
        }
    }

    private void ClearImage()
    {
        ImageName = Guid.NewGuid().ToString();
        ImageURL = null;
        ImageFile = null;
    }
    
    
    //Methods for video upload
    private void LoadVideo()
    {
        if (!string.IsNullOrWhiteSpace(article.VideoURL))
        {
            VideoURL = $"{article.VideoURL}?nocache={Guid.NewGuid()}";
            VideoName = VideoURL.Split("/").Last();
        }
    } 
    
    
    private async Task OnVideoFileSelection(InputFileChangeEventArgs e)
    {
        ClearVideo();
        VideoFile = e.GetMultipleFiles().FirstOrDefault();
        
        if (VideoFile != null)
        {
            var bytes = new byte[VideoFile.Size];
            await VideoFile.OpenReadStream(1000000000).ReadAsync(bytes);
            var contentType = VideoFile.ContentType;
            VideoURL = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }
    
    
    private async Task UploadVideo()
    {

        if (VideoFile != null)
        {
            var bytes = new byte[VideoFile.Size];
            await VideoFile.OpenReadStream(1000000000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(VideoFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", VideoFile.Name);
            var response = await Http.PostAsync($"api/VideoUpload/{VideoName}", content);

            if (response.IsSuccessStatusCode)
            {
                VideoURL = response.Headers.Location?.ToString();
                Console.WriteLine(VideoURL);
            }
        }
    }
    
    

    private void ClearVideo()
    {
        VideoName = Guid.NewGuid().ToString();
        VideoURL = null;
        VideoFile = null;
    }
    
    
    
    //HTML Editor and required properties
    
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        HtmlInput = args.Html;
    }
    
    void OnTitleChange(string title)
    {
        TitleInput = title;
    }
    
    void OnDescriptionChange(string description)
    {
        DescriptionInput = description;
    }
    
    void OnHtmlChange(string html)
    {
        HtmlInput = html;
    }
    
    void OnChosenDifficultyLevelChange(int value)
    {
        ChosenDifficulty = value;
    }
    
    
    void OnChooseLanguages(IEnumerable<int> value)
    {
        ChosenLanguages = value;
    }
    
    //Add new language
    private async Task OnAddLanguage()
    {
        if (NewLang == null || NewLang.Trim() == "")
        {
            return;
        }
        
        var langToPost = new ProgrammingLanguageCreateDTO
        {
            Name = NewLang
        };
        
        try
        {
            var response = await Http.PostAsJsonAsync("api/ProgrammingLanguages", langToPost);

            if (response.IsSuccessStatusCode)
            {
                JSRuntime.InvokeAsync<bool>("alert", "Congrats, you just uploaded a new language!");
                ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
                NewLang = null; StateHasChanged();
            }
            else
            {
                JSRuntime.InvokeAsync<bool>("alert", "Something went wrong, make sure the programming language is not already added");
            }
        }
        catch
        {
            NewLang = null;
            StateHasChanged();
        }
    }

    void OnNewLanguageValue(string val)
    {
        NewLang = val;
    }

    //Update article
    private async Task UpdateArticle()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(TitleInput))
            {
                JSRuntime.InvokeAsync<bool>("alert", "Title is required");
            }
            await UploadImage();
            await UploadVideo();

            var article = new ArticleUpdateDTO
            {
                Body = HtmlInput,
                Title = String.IsNullOrEmpty(TitleInput) ? null : TitleInput,
                Type = ChosenType == 0 ? ArticleType.Written : ArticleType.Video,
                Description = DescriptionInput,
                ProgrammingLanguages = ChosenLanguages.Select(lang => ProgrammingLanguages[lang].Name).ToList(),
                Difficulty = (DifficultyLevel) (ChosenDifficulty + 1),
                ImageURL = ImageURL,
                VideoURL = VideoURL

            };

            var response = await Http.PutAsJsonAsync($"api/Article/{ArticleId}", article);
            if (response.IsSuccessStatusCode)
            {

                var uri = $"{NavigationManager.BaseUri}ArticleDetails/{ArticleId}";

                NavigationManager.NavigateTo(uri);
            }
        }
        catch (Exception)
        {
        }
    }
            
    

    private async Task DeleteArticle()
    {
        var response = await Http.DeleteAsync($"api/Article/{ArticleId}");
        if (response.IsSuccessStatusCode)
        {
            var uri = $"{NavigationManager.BaseUri}/";
            NavigationManager.NavigateTo(uri);
        }
    }

    private void Back()
    {
        var uri = $"{NavigationManager.BaseUri}ArticleDetails/{ArticleId}";

        NavigationManager.NavigateTo(uri);
    }
    
}
