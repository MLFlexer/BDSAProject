@page "/CreateArticle"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SETraining.Shared.DTOs
@using SETraining.Shared.ExtensionMethods
@using SETraining.Shared.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Create new article</PageTitle>


<div class="row">
    <div class="col-12">
        <h1>Create a new article</h1>
        <h4>Choose article type</h4>
        <RadzenRadioButtonList @bind-Value=@ChosenType TValue="int" Change=@((args) => OnChooseType(args))>
                            <Items>
                                <RadzenRadioButtonListItem Text="Video" Value="0" />
                                <RadzenRadioButtonListItem Text="Written" Value="1" />
                            </Items>
                        </RadzenRadioButtonList>
        <h4>Title</h4>
        <RadzenTextBox Change=@(args => OnTitleChange(args.ToString())) />
        <h4>Description</h4>
        <RadzenTextBox Change=@(args => OnDescriptionChange(args.ToString())) />

        @if (ProgrammingLanguages != null)
       {
           <div style="margin-top: 20px;">
               <h4>Choose existing languages</h4>
             
                      
                       
                             <RadzenCheckBoxList @bind-Value=@ChosenLanguages TValue="int" Orientation="Orientation.Horizontal" Change=@(args => OnChooseLanguages(args))>
                                 <Items>
                                      @foreach (var (language, i) in ProgrammingLanguages.Select((value, i) => (value, i)))
                                      {
                                          <RadzenCheckBoxListItem Text="@language.Name" Value="@i"/>
                                      }
                                 </Items>
                                 </RadzenCheckBoxList>                     
       
               <div style="margin-top: 10px; margin-left: 5px;">Or add new language</div>
                <RadzenTextBox Placeholder="Typescript..." Change=@(args => OnNewLanguageValue(args)) Class="w-20" />
                <RadzenButton Click=@(args => OnAddLanguage()) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
           </div>
       
       
       
       
       }
        
        <div style="margin-top: 20px;">
            <h4>Pick difficulty level</h4>
                   <RadzenRadioButtonList @bind-Value=@ChosenDifficulty TValue="int" Change=@(args => OnChosenDifficultyLevelChange(args))>
                                 <Items>
                                     <RadzenRadioButtonListItem Text="@DifficultyLevel.Novice.ToString()" Value="0"/>
                                     <RadzenRadioButtonListItem Text="@DifficultyLevel.Intermediate.ToString()" Value="1"/>
                                     <RadzenRadioButtonListItem Text="@DifficultyLevel.Expert.ToString()" Value="2"/>
                                 </Items>
                             </RadzenRadioButtonList> 
        </div>
       
        <div class="form-group">
            @if (!string.IsNullOrWhiteSpace(ImageURL))
            {
                <div><img src="@ImageURL" alt="Article Image" class="img-thumbnail"></div>
            }
                               
            @if (ChosenType != 0)
            {
                <h4 style="margin-top: 20px;">Add image</h4>
                <label for="Image">Image</label>  
            }
            else
            {
                <h4 style="margin-top: 20px;">Add thumbnail to your video</h4>
                <label for="Image">Image</label>  
            }
                           
        </div>
        
        
        <div class="form-group input-group">
                               <InputFile id="Image" OnChange="@OnImageFileSelection" class="form-control" />
                               <button type="button" @onclick="ClearImage" class="btn btn-secondary">Clear</button>
                               </div>
        
                                   
        <div style="margin-top: 20px;">
            @if (ChosenType != 0)
            {
                <h4>Content of the article</h4>
                <RadzenHtmlEditor @bind-Value=@HtmlInput style="height: 500px; margin-bottom: 1rem;" Change=@OnHtmlChange Paste=@OnPaste>
                      <RadzenHtmlEditorUndo />
                      <RadzenHtmlEditorRedo />
                      <RadzenHtmlEditorFontName />
                      <RadzenHtmlEditorFontSize />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorBold />
                      <RadzenHtmlEditorItalic />
                      <RadzenHtmlEditorUnderline />
                      <RadzenHtmlEditorStrikeThrough />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorAlignLeft />
                      <RadzenHtmlEditorAlignCenter />
                      <RadzenHtmlEditorAlignRight />
                      <RadzenHtmlEditorJustify />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorIndent />
                      <RadzenHtmlEditorOutdent />
                      <RadzenHtmlEditorUnorderedList />
                      <RadzenHtmlEditorOrderedList />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorColor />
                      <RadzenHtmlEditorBackground />
                      <RadzenHtmlEditorRemoveFormat />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorSubscript />
                      <RadzenHtmlEditorSuperscript />
                      <RadzenHtmlEditorSeparator />
                      <RadzenHtmlEditorFormatBlock />
                </RadzenHtmlEditor>
            }
            else
            {
                @if (!string.IsNullOrWhiteSpace(VideoURL))
                {
                    <BlazoredVideo
                        class="w-100"
                        style="max-width:800px;"
                        controls="controls">
                        autoplay="autoplay" 
                        <source src="@VideoURL" type="video/mp4"/>
                    </BlazoredVideo>
                }
                
                <h4 style="margin-top: 20px;">Add video</h4>
                <label for="Image">Video</label>  
                <div class="form-group input-group">
                    <InputFile id="Image" OnChange="@OnVideoFileSelection" class="form-control" />
                    <button type="button" @onclick="ClearVideo" class="btn btn-secondary">Clear</button>
                </div>
            }
            
        </div>
        
                  
    </div>
  
</div>
  <RadzenButton style="margin-bottom:10px;"Click=@(PublishArticle) Text="Publish" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />

  
        

        

@code {
    
    //Properties
    private int ChosenType;
    
    private string ImageName = Guid.NewGuid().ToString();
    private string? ImageURL;
    private IBrowserFile? ImageFile;
    private readonly IReadOnlyCollection<string> AllowedImageContent = new[]
    {
        "image/gif",
        "image/jpeg",
        "image/png"
    };
    
    private string VideoName = Guid.NewGuid().ToString();
    private string? VideoURL;
    private IBrowserFile? VideoFile;
    
    
    string HtmlInput;
    string TitleInput;
    string DescriptionInput;
    
    bool? CheckBoxValue;
    string? NewLang;
    
    ProgrammingLanguageDTO[]? ProgrammingLanguages;
    IEnumerable<int> ChosenLanguages = new List<int>();
    int ChosenDifficulty = 0;
    
    //Methods

    //Init method
    protected override async Task OnInitializedAsync()
    {
        ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
    }
    
    private void OnChooseType(int type)
    {
        ChosenType = type;
    }
    
    //Methods for image uploads
    private async Task OnImageFileSelection(InputFileChangeEventArgs e)
    {
        ClearImage();
        ImageFile = e.GetMultipleFiles().FirstOrDefault();
        
        if (!AllowedImageContent.Contains(ImageFile.ContentType))
        {
            ClearImage();
            JSRuntime.InvokeAsync<bool>("alert", "Images can only be in JPEG, PNG or GIF format");
        }

        if (ImageFile != null)
        {
            var bytes = new byte[ImageFile.Size];
            await ImageFile.OpenReadStream(100000000).ReadAsync(bytes);
            var contentType = ImageFile.ContentType;
            ImageURL = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }
    
    
    private async Task UploadImage()
    {


        if (ImageFile != null)
        {
            var bytes = new byte[ImageFile.Size];
            await ImageFile.OpenReadStream(100000000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(ImageFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", ImageFile.Name);
            var response = await Http.PostAsync($"api/ImageUpload/{ImageName}", content);

            if (response.IsSuccessStatusCode)
            {
                ImageURL = response.Headers.Location?.ToString();
            }
        }
    }
    
    private void ClearImage()
    {
        ImageName = Guid.NewGuid().ToString();
        ImageURL = null;
        ImageFile = null;
    }
    
    //Methods for video upload
    private async Task OnVideoFileSelection(InputFileChangeEventArgs e)
    {
        ClearVideo();
        VideoFile = e.GetMultipleFiles().FirstOrDefault();

        if (VideoFile.ContentType != "video/mp4")
        {
            ClearVideo();
            JSRuntime.InvokeAsync<bool>("alert", "Videos can only be in MP4 format");
        }

        if (VideoFile != null)
        {
            var bytes = new byte[VideoFile.Size];
            await VideoFile.OpenReadStream(1000000000).ReadAsync(bytes);
            var contentType = VideoFile.ContentType;
            VideoURL = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }
    
    
    private async Task UploadVideo()
    {

        if (VideoFile != null)
        {
            var bytes = new byte[VideoFile.Size];
            await VideoFile.OpenReadStream(1000000000).ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(VideoFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", VideoFile.Name);
            var response = await Http.PostAsync($"api/VideoUpload/{VideoName}", content);

            if (response.IsSuccessStatusCode)
            {
                VideoURL = response.Headers.Location?.ToString();
                Console.WriteLine(VideoURL);
            }
        }
    }
    
    

    private void ClearVideo()
    {
        VideoName = Guid.NewGuid().ToString();
        VideoURL = null;
        VideoFile = null;
    }
    
    //HTML Editor and required properties
    
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        HtmlInput = args.Html;
    }
    
    void OnTitleChange(string title)
    {
        TitleInput = title;
    }
    
    void OnDescriptionChange(string description)
    {
        DescriptionInput = description;
    }
    
    void OnHtmlChange(string html)
    {
        HtmlInput = html;
    }
    
    void OnChosenDifficultyLevelChange(int value)
    {
        ChosenDifficulty = value;
    }

    void OnChooseLanguages(IEnumerable<int> value)
    {
        ChosenLanguages = value;
    }
    
    //Add new language
    private async Task OnAddLanguage()
    {
        if (NewLang == null || NewLang.Trim() == "")
        {
            return;
        }
        
        try
        {
            var langToPost = new ProgrammingLanguageCreateDTO
            {
                Name = NewLang
            };
            
            var response = await Http.PostAsJsonAsync("api/ProgrammingLanguages", langToPost);

            if (response.IsSuccessStatusCode)
            {
                JSRuntime.InvokeAsync<bool>("alert", "Congrats, you just uploaded a new language!");
                ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
            }
            else
            {
                JSRuntime.InvokeAsync<bool>("alert", "Something went wrong, make sure the programming language is not already added");
            }
        }
        catch
        {
        }
    }

    void OnNewLanguageValue(string val)
    {
        NewLang = val;
    }

    //Publish article
    private async Task PublishArticle()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(TitleInput))
            {
                JSRuntime.InvokeAsync<bool>("alert", "Title is required");
            }

            await UploadImage();
            await UploadVideo();

            var article = new ArticleCreateDTO
            {
                Body = HtmlInput,
                Title = TitleInput,
                Type = ChosenType == 0 ? ArticleType.Video : ArticleType.Written,
                Description = DescriptionInput,
                ProgrammingLanguages = ChosenLanguages.Select(lang => ProgrammingLanguages[lang].Name).ToList(),
                Difficulty = (DifficultyLevel) (ChosenDifficulty + 1),
                ImageURL = ImageURL,
                VideoURL = VideoURL
            };

            var response = await Http.PostAsJsonAsync("api/Article", article);
            if (response.IsSuccessStatusCode)
            {
                var created = await response.Content.ReadFromJsonAsync<ArticleDTO>();

                var uri = $"{NavigationManager.BaseUri}ArticleDetails/{created.Id}";

                NavigationManager.NavigateTo(uri);
            }
        }
        catch (Exception)
        {
        }
    }
}
