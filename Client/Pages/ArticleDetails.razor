@page "/ArticleDetails/{articleId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using SETraining.Shared.DTOs
@inject IHttpClientFactory _httpClientFactory
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SETraining.Shared.Models
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<PageTitle>@(article == null ? "Loading" : article.Title)</PageTitle>

<div style="position:relative">
    <RadzenButton style="right:0px; position: absolute;" Click=@(() => Back()) Text="Go Back" ButtonStyle="ButtonStyle.Primary" />
    <AuthorizeView>
        <Authorized>
             <RadzenButton style="right:0px; top: 50px; position: absolute;" Click=@(() => UpdateArticle()) Text="Edit article" ButtonStyle="ButtonStyle.Secondary" />
        </Authorized>
    </AuthorizeView>
    
    @if (article != null)
    {
        <div>
            <RadzenImage Path="@(article.ImageURL?? "placeholder_small.jpg")" Class="img-fluid" Style="margin-top: 100px; border-radius: 5px;"/>
            <h1 class="mb-0">@(article.Title)</h1>
            <div>
                @article.Created.ToString("D")
            </div>
            <div>
                @article.Type
            </div>
            <div style="font-size: .8em">@article.Description
            </div>
            <div class="text-truncate" style="margin-top: 10px">
                @foreach (var l in article.ProgrammingLanguages!)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}") />
                }

                @if (article.Difficulty != null)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", article.Difficulty.ToString())}") />
                }
                <br/>
            </div>
        </div>
        <hr/>
        if (article.Type == ArticleType.Written)
        {
            <div style="width: 100%; height: 500px; margin-top: 10px">
                @((MarkupString) article.Body!)
            </div>
        }
        else
        {
            if (article.VideoURL != null)
            {
                <BlazoredVideo
                    class="w-100"
                    style="max-width:800px;"
                    controls="controls">
                    autoplay="autoplay" 
                    <source src="@article.VideoURL" type="video/mp4"/>
                </BlazoredVideo>
            }
        }
    }
</div>

@code {
    [Parameter]
    public int? ArticleId { get; set; }

    private ArticleDTO? article;
    HttpClient anonymous = new ();

    protected override async Task OnParametersSetAsync()
    {
        anonymous = _httpClientFactory.CreateClient("SETraining.ServerAPI.Anonymous");
        
        if (ArticleId != 0)
        {
            article = await anonymous.GetFromJsonAsync<ArticleDTO>($"api/Article/id={ArticleId}");
        }

        await base.OnParametersSetAsync();
    }
    
    private void Back()
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}");
    }
    
    private void UpdateArticle()
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}UpdateArticle/{ArticleId}");
    }
}