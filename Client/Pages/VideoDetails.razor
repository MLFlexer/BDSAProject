@page "/VideoDetails/{videoId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using SETraining.Shared.DTOs
@inject IHttpClientFactory _httpClientFactory

<PageTitle>@(video == null ? "Loading" : video.Title)</PageTitle>


<div style="position:relative">

<RadzenButton style="right:0px; position: absolute;" Click=@(() => Back()) Text="Go Back" ButtonStyle="ButtonStyle.Secondary" />
   

@if (video != null)
{
    <div>
        <h1 class="mb-0">@(video.Title)</h1>
        <div>
            Video
        </div>
        <div style="font-size: .8em">@video.Description</div>
        <div class="col-md-8 text-truncate" style="margin-top: 10px">
            @foreach (var l in video.ProgrammingLanguages)
            {
                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}")/>
            }
            
            @if (video.Difficulty != null)
            {
                <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", video.Difficulty.Value.ToString())}")/>
            }                     
        </div>
    </div>   
    <iframe width="560" height="315" src="https://www.youtube.com/embed/eIrMbAQSU34" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

    <BlazoredVideo 
                   class="w-100"
                   style="max-width:800px;"
                   controls="controls">
        <source src="https://www.youtube.com/embed/eIrMbAQSU34" type="video/mp4" />
    </BlazoredVideo>
    
     <div style="width: 100%; height: 500px; margin-top: 10px">
        @((MarkupString) video.Path)
    </div>

}
</div>


@code {
    
    [Parameter]
    public int? VideoId { get; set; }

    private VideoDTO? video;
    HttpClient anonymous = new ();


    protected override async Task OnParametersSetAsync()
    {
        anonymous = _httpClientFactory.CreateClient("SETraining.ServerAPI.Anonymous");

        if (VideoId != 0)
        {
            video = await anonymous.GetFromJsonAsync<VideoDTO>($"api/Video/id={VideoId}");
        }

        await base.OnParametersSetAsync();
    }
    private void Back()
    {
        var uri = $"{NavigationManager.BaseUri}";

        NavigationManager.NavigateTo(uri);
    }
}