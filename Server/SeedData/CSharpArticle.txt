<p style="margin-right: 0cm; margin-left: 0cm; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); margin-top: 0cm;"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">Today, we are happy to announce the release of C# 10 as part of .NET 6 and Visual Studio 2022. In this post, we’re covering a lot of the new C# 10 features that make your code prettier, more expressive, and faster.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; color: rgb(0, 0, 0); word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">Read the</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);"><a href="https://aka.ms/vs2022gablog" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span lang="EN-US" style="color: rgb(0, 93, 166);">Visual Studio 2022 announcement</span></a></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">and the</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);"><a href="https://aka.ms/dotnet6-GA" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span lang="EN-US" style="color: rgb(0, 93, 166);">.NET 6 announcement</span></a></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: Tahoma, sans-serif; color: rgb(51, 51, 51);">to find out more, including how to install.<o:p></o:p></span></p><h2 id="global-and-implicit-usings" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; letter-spacing: normal; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Global and implicit usings</span><span lang="EN-US" style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; color: rgb(0, 0, 0); word-break: break-word; caret-color: rgb(51, 51, 51);"><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives simplify how you work with namespaces. C# 10 includes a new</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directive and</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><em><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">implicit usings</span></em><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">to reduce the number of usings you need to specify at the top of each file.<o:p></o:p></span></p><h3 id="global-using-directives" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; letter-spacing: normal; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Global using directives</span><span lang="EN-US" style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; color: rgb(0, 0, 0); word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">If the keyword</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">appears prior to a</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directive, that using applies to the entire project:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);">global</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"> </span><span class="kwd"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);"></span>using</span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"> </span><span class="typ"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>System</span><span class="pun"><span lang="EN-US" style="font-family: Menlo;">;</span></span><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; color: rgb(0, 0, 0); word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can use any feature of</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">within a</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directive. For example, adding</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">static</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">imports a type and makes the type’s members and nested types available throughout your project. If you use an alias in your using directive, that alias will also affect your entire project:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);">global</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"> </span><span class="kwd"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);"></span>using</span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"> </span><span class="kwd"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);"></span>static</span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"> </span><span class="typ"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>System</span><span class="pun"><span lang="EN-US" style="font-family: Menlo;">.</span></span><span class="typ"><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);">Console</span></span><span class="pun"><span lang="EN-US" style="font-family: Menlo;">;</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);"></span>global<span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(30, 30, 255);"></span>using</span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Env</span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span lang="EN-US" style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>System</span><span class="pun"><span lang="EN-US" style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);">Environment</span></span><span class="pun"><span lang="EN-US" style="font-family: Menlo; color: black;">;</span></span><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can put global usings in any</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pun"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="pln"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">cs</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">file, including</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Program</span></span><span class="pun"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="pln"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">cs</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or a specifically named file like</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">globalusings</span></span><span class="pun"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="pln"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">cs</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. The scope of global usings is the current compilation, which generally corresponds to the current project.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">For more information, see</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/using-directive#global-modifier" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span lang="EN-US" style="color: rgb(0, 93, 166);">global using directives</span></a></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">.<o:p></o:p></span></p><h3 id="implicit-usings" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Implicit usings</span><span lang="EN-US" style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The Implicit usings feature automatically adds common</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives for the type of project you are building. To enable implicit usings set the</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ImplicitUsings</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">property in your</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pun"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="pln"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">csproj</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">file:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="tag"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);">&lt;PropertyGroup&gt;</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="com"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 136, 0);"></span>&lt;!-- Other properties like OutputType and TargetFramework --&gt;<span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;ImplicitUsings&gt;<span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;">enable</span></span><span class="tag"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);">&lt;/ImplicitUsings&gt;</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;/PropertyGroup&gt;<span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Implicit usings are enabled in the new .NET 6 templates. Read more about the changes to the .NET 6 templates at this</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://devblogs.microsoft.com/dotnet/announcing-net-6-preview-7/#net-sdk-c-project-templates-modernized" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span lang="EN-US" style="color: rgb(0, 93, 166);">blog post</span></a></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The specific set of</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives included depend on the type of application you are building. For example, implicit usings for a console application or a class library are different than those for an ASP.NET application.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">For more information, see this</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://aka.ms/csharp-implicit-usings" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span lang="EN-US" style="color: rgb(0, 93, 166);">implicit usings</span></a></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">article.<o:p></o:p></span></p><h3 id="combining-using-features" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Combining using features</span><span lang="EN-US" style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Traditional</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives at the top of your files, global</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives, and implicit usings work well together. Implicit usings let you include the .NET namespaces appropriate to the kind of project you’re building with a single line in your project file.</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives let you include additional namespaces to make them available throughout your project. The</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives at the top of your code files let you include namespaces used by just a few files in your project.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Regardless of how they are defined, extra</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives increase the possibility of ambiguity in name resolution. If you encounter this, consider adding an alias or reducing the number of namespaces you are importing. For example, you can replace</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives with explicit using directives at the top of a subset of files.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">If you need to remove namespaces that have been included via implicit usings, you can specify them in your project file:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="tag"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);">&lt;ItemGroup&gt;</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> &nbsp;</span></span><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;Using<span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="atn"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Remove</span><span class="pun"><span lang="EN-US" style="font-family: Menlo; color: black;">=</span></span><span class="atv"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 136, 0);">"System.Threading.Tasks"</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>/&gt;</span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;/ItemGroup&gt;<span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can also add namespace that behave as though they were</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">global</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">directives, you can add</span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Using</span></span><span class="apple-converted-space"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">items to your project file, for example:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="tag"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);">&lt;ItemGroup&gt;</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> &nbsp;</span></span><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;Using<span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="atn"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Include</span><span class="pun"><span lang="EN-US" style="font-family: Menlo; color: black;">=</span></span><span class="atv"><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 136, 0);">"System.IO.Pipes"</span></span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"> </span><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>/&gt;</span><span class="pln"><span lang="EN-US" style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="tag"></span><span lang="EN-US" style="font-family: Menlo; color: rgb(0, 0, 136);"></span>&lt;/ItemGroup&gt;<span lang="EN-US" style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><h2 id="file-scoped-namespaces" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">File-scoped namespaces</span><span lang="EN-US" style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span lang="EN-US" style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Many files contain code for a single namespace. Starting in C# 10, you can include a namespace as a statement, followed by a semi-colon and without the curly brackets:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">namespace</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>MyCompany</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">MyNamespace</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;"><o:p>&nbsp;</o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>class<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>MyClass</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Note: no indentation</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>...</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"></span><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">This simplifies the code and removes a level of nesting. Only one file-scoped namespace declaration is allowed, and it must come before any types are declared.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">For more information about file-scoped namespaces, see the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/namespace" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">namespace keyword</span></a></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">article.<o:p></o:p></span></p><h2 id="improvements-for-lambda-expressions-and-method-groups" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Improvements for lambda expressions and method groups</span><span style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">We’ve made several improvements to both the types and the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/whats-new/csharp-10#lambda-expression-improvements" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">syntax surrounding lambdas</span></a>. We expect these to be widely useful, and one of the driving scenarios has been to make</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-net-6/" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">ASP.NET Minimal APIs</span></a>even more straightforward.<o:p></o:p></span></p><h3 id="natural-types-for-lambdas" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Natural types for lambdas</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Lambda expressions now sometimes have a “natural” type. This means that the compiler can often infer the type of the lambda expression.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Up until now a lambda expression had to be converted to a delegate or an expression type. For most purposes you’d use one of the overloaded</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Func</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;...&gt;</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Action</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;...&gt;</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">delegate types in the BCL:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Func</span></span><span class="pun"><span style="font-family: Menlo; color: black;">&lt;</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Starting with C# 10, however, if a lambda does not have such a “target type” we will try to compute one for you:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can hover over</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">var</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">parse</span></span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">in your favorite editor and see that the type is still</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Func</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">string</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">,</span></span><span class="kwd"></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">int</span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&gt;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. In general, the compiler will use an available</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Func</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Action</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">delegate, if a suitable one exists. Otherwise, it will synthesize a delegate type (for example, when you have</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ref</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">parameters or have a large number of parameters).<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Not all lambdas have natural types – some just don’t have enough type information. For instance, leaving off parameter types will leave the compiler unable to decide which delegate type to use:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// ERROR: Not enough type info in the lambda</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The natural type of lambdas means that they can be assigned to a weaker type, such as</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">object</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Delegate</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">object</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp; &nbsp;</span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Func&lt;string, int&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Delegate<span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Func&lt;string, int&gt;</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">When it comes to expression trees we do a combination of “target” and “natural” typing. If the target type is</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">LambdaExpression</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or the non-generic</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Expression</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">(base type for all expression trees)</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><em><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">and</span></em><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">the lambda has a natural delegate type</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">D</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">we will instead produce an</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Expression</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">D</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&gt;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">LambdaExpression</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parseExpr </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Expression&lt;Func&lt;string, int&gt;&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Expression<span class="pln"><span style="font-family: Menlo; color: black;"> parseExpr </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Expression&lt;Func&lt;string, int&gt;&gt;</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><h3 id="natural-types-for-method-groups" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Natural types for method groups</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Method groups (that is, method names without argument lists) now also sometimes have a natural type. You have always been able to convert a method group to a compatible delegate type:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Func</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">&lt;int&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> read </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Read</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Action<span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">&lt;string&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> write </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Write</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Now, if the method group has just one overload it will have a natural type:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> read </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Read</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Just one overload; Func&lt;int&gt; inferred</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>var<span class="pln"><span style="font-family: Menlo; color: black;"> write </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Write</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// ERROR: Multiple overloads, can't choose</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><h3 id="return-types-for-lambdas" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Return types for lambdas</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">In the previous examples, the return type of the lambda expression was obvious and was just being inferred. That isn’t always the case:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> choose </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">bool</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> b</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> b </span></span><span class="pun"><span style="font-family: Menlo; color: black;">?</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>:</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"two"</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// ERROR: Can't infer return type</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">In C# 10, you can specify an explicit return type on a lambda expression, just like you do on a method or a local function. The return type goes right before the parameters. When you specify an explicit return type, the parameters must be parenthesized, so that it’s not too confusing to the compiler or other developers:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> choose </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>object</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">bool</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> b</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> b </span></span><span class="pun"><span style="font-family: Menlo; color: black;">?</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>:</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"two"</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Func&lt;bool, object&gt;</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><h3 id="attributes-on-lambdas" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Attributes on lambdas</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Starting in C# 10, you can put attributes on lambda expressions in the same way you do for methods and local functions. They go right where you expect; at the beginning. Once again, the lambda’s parameter list must be parenthesized when there are attributes:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Func</span></span><span class="pun"><span style="font-family: Menlo; color: black;">&lt;</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> parse </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>[</span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Example</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">1</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)]</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Parse</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">s</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>var<span class="pln"><span style="font-family: Menlo; color: black;"> choose </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>[</span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Example</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)][</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Example</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">3</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)]</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>object</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">bool</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> b</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=&gt;</span><span class="pln"><span style="font-family: Menlo; color: black;"> b </span></span><span class="pun"><span style="font-family: Menlo; color: black;">?</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>:</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"two"</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Just like local functions, attributes can be applied to lambdas if they are valid on</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">AttributeTargets</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Method</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Lambdas are invoked differently than methods and local functions, and as a result attributes do not have any effect when the lambda is invoked. However, attributes on lambdas are still useful for code analysis, and they are also emitted on the methods that the compiler generates under the hood for lambdas, so they can be discovered via reflection.<o:p></o:p></span></p><h2 id="improvements-to-structs" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Improvements to structs</span><span style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# 10 introduces features for structs that provide better parity between structs and classes. These new features include parameterless constructors, field initializers, record structs and</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">with</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">expressions.<o:p></o:p></span></p><h3 id="parameterless-struct-constructors-and-field-initializers" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Parameterless struct constructors and field initializers</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Prior to C# 10, every struct had an implicit public parameterless constructor that set the struct’s fields to</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">default</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. It was an error for you to create a parameterless constructor on a struct.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Starting in C# 10, you can include your own parameterless struct constructors. If you don’t supply one, the implicit parameterless constructor will be supplied to set all fields to their default. Parameterless constructors you create in structs must be public and cannot be partial:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">public</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>struct</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pun"><span style="font-family: Menlo; color: black;">()</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>City<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"&lt;unknown&gt;"</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>City</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can initialize fields in a parameterless constructor as above, or you can initialize them via field or property initializers:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">public</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>struct</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>City</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"&lt;unknown&gt;"</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Structs that are created via</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">default</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">or as part of array allocation ignore explicit parameterless constructors, and always set struct members to their default values. For more information about parameterless constructors in structs, see the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/struct#parameterless-constructors-and-field-initializers" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">struct type</span></a>.<o:p></o:p></span></p><h3 id="record-structs" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">record structs</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Starting in C# 10, records can now be defined with</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">record</span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">struct</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. These are similar to record classes that were introduced in C# 9:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">public</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> record </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">struct</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>FirstName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can continue to define record classes with</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">record</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">, or you can use</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">record</span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">class</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">for clarity.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Structs already had value equality – when you compare them it is by value. Record structs add</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">IEquatable</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">T</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&gt;</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">support and the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">==</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">operator. Record structs provide a custom implementation of</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">IEquatable</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&lt;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">T</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&gt;</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">to avoid the performance issues of reflection, and they include record features like a</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ToString</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">()</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">override.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Record structs can be</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><em><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">positional</span></em><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">, with a primary constructor implicitly declaring public members:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">public</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> record </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">struct</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">string</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>FirstName</span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName</span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The parameters of the primary constructor become public auto-implemented properties of the record struct. Unlike record classes, the implicitly created properties are read/write. This makes it easier to convert tuples to named types. Changing return types from a tuple like</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">(</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">string</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">FirstName</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">,</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">string</span></span><span class="typ"></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">LastName</span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">)</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">to a named type of</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Person</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">can clean up your code and guarantee consistent member names. Declaring the positional record struct is easy and keeps the mutable semantics.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">If you declare a property or field with the same name as a primary constructor parameter, no auto-property will be synthesized and yours will be used.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">To create an immutable record struct, add</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">readonly</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">to the struct (as you can to any struct) or apply</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">readonly</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">to individual properties. Object initializers are part of the construction phase where readonly properties can be set. Here is just one of the ways you can work with immutable record structs:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> person </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>new</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>FirstName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Mads"</span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Torgersen"</span><span class="pun"><span style="font-family: Menlo; color: black;">};</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;"><o:p>&nbsp;</o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>readonly</span><span class="pln"><span style="font-family: Menlo; color: black;"> record </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">struct</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>FirstName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>public<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>get</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> init</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more about</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/record" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">record structs in this article</span></a>.<o:p></o:p></span></p><h3 id="sealed-modifier-on-tostring-in-record-classes" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span class="kwd"><b><span style="font-size: 16pt; font-family: Menlo; color: rgb(204, 0, 0);">sealed</span></b></span><span class="apple-converted-space"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">modifier on<span class="apple-converted-space">&nbsp;</span></span><span class="typ"><b><span style="font-size: 16pt; font-family: Menlo; color: rgb(204, 0, 0);">ToString</span></b></span><span class="pun"><b><span style="font-size: 16pt; font-family: Menlo; color: rgb(204, 0, 0);">()</span></b></span><span class="apple-converted-space"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">in record classes</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Record classes have also been improved. Starting in C# 10 the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ToString</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">()</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">method can include the sealed modifier, which prevents the compiler from synthesizing a</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ToString</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">implementation for any derived records.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more about</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ToString</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">()</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">in records</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/builtin-types/record#built-in-formatting-for-display" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">in this article</span></a>.<o:p></o:p></span></p><h3 id="with-expressions-on-structs-and-anonymous-types" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span class="kwd"><b><span style="font-size: 16pt; font-family: Menlo; color: rgb(204, 0, 0);">with</span></b></span><span class="apple-converted-space"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">expressions on structs and anonymous types</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# 10 supports</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">with</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">expressions for all structs, including record structs, as well as for anonymous types:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> person2 </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> person </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">with</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Kristensen"</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>};</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">This returns a new instance with the new value. You can update any number of values. Values you do not set will retain the same value as the initial instance.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Learn more about</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">with</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/with-expression" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">in this article</span></a><o:p></o:p></span></p><h2 id="interpolated-string-improvements" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Interpolated string improvements</span><span style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">When we added interpolated strings to C#, we always felt that there was more that could be done with that syntax down the line, both for performance and expressiveness. With C# 10, that time has come!<o:p></o:p></span></p><h3 id="interpolated-string-handlers" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Interpolated string handlers</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Today the compiler turns interpolated strings into a call to</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">string</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Format</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. This can lead to a lot of allocations – the boxing of arguments, allocation of an argument array, and of course the resulting string itself. Also, it leaves no wiggle room in the meaning of the actual interpolation.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">In C# 10 we’ve added a library pattern that allows an API to “take over” the handling of an interpolated string argument expression. As an example, consider</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">StringBuilder</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Append</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> sb </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>new</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>StringBuilder</span><span class="pun"><span style="font-family: Menlo; color: black;">();</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">sb</span></span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Append</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">$</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"Hello {args[0]}, how are you?"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Up until now, this would call the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Append</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">(</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">string</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">?</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">value</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">)</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">overload with a newly allocated and computed string, appending that to the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">StringBuilder</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">in one chunk. However,</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Append</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">now has a new overload</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Append</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">(</span></span><span class="kwd"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">ref</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">StringBuilder</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">AppendInterpolatedStringHandler</span></span><span class="apple-converted-space"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">&nbsp;</span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">handler</span></span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">)</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">which takes precedence over the string overload when an interpolated string is used as argument.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">In general, when you see parameter types of the form</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">SomethingInterpolatedStringHandler</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">the API author has done some work behind the scenes to handle interpolated strings more appropriately for their purposes. In the case of our</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Append</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">example, the strings</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="str"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">"Hello "</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">,</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="pln"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">args</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">[</span></span><span class="lit"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">0</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">]</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">and</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="str"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">", how are you?"</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">will be individually appended to the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">StringBuilder</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">, which is much more efficient and has the same outcome.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Sometimes you want to do the work of building the string only under certain conditions. An example is</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Debug</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Assert</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Debug</span></span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Assert</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">condition</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> $</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"{SomethingExpensiveHappensHere()}"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">In most cases, the condition will be true and the second parameter is unused. However, all of the arguments are computed on every call, needlessly slowing down execution.</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Debug</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Assert</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">now has an overload with a custom interpolated string builder, which ensures that the second argument isn’t even evaluated unless the condition is false.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Finally, here’s an example of actually changing the behavior of string interpolation in a given call:</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">String</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">.</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Create</span></span><span class="pun"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">()</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">lets you specify the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">IFormatProvider</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">used to format the expressions in the holes of the interpolated string argument itself:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">String</span></span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Create</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">CultureInfo</span></span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">InvariantCulture</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> $</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"The result is {result}"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">You can learn more about interpolated string handlers,</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/tokens/interpolated#compilation-of-interpolated-strings" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">in this article</span></a></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">and this</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/whats-new/tutorials/interpolated-string-handler" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">tutorial</span></a></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">on creating a custom handler.<o:p></o:p></span></p><h3 id="constant-interpolated-strings" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Constant interpolated strings</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">If all the holes of an interpolated string are constant strings, then the resulting string is now also constant. This lets you use string interpolation syntax in more places, like attributes:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="pun"><span style="font-family: Menlo; color: black;">[</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">Obsolete</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">$</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"Call {nameof(Discard)} instead"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)]</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Note that the holes must be filled with constant</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><em><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">strings</span></em><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">. Other types, like numeric or date values, cannot be used because they are sensitive to</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Culture</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">, and can’t be computed at compile time.<o:p></o:p></span></p><h2 id="other-improvements" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Other improvements</span><span style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# 10 has a number of smaller improvements across the language. Some of these just make C# work in the way you expect.<o:p></o:p></span></p><h3 id="mix-declarations-and-variables-in-deconstruction" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Mix declarations and variables in deconstruction</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Prior to C# 10, deconstruction required all variables to be new, or all of them to be previously declared. In C# 10, you can mix:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">int</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> x2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>int<span class="pln"><span style="font-family: Menlo; color: black;"> y2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(<span class="pln"><span style="font-family: Menlo; color: black;">x2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> y2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">0</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Works in C# 9</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(<span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> x</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>var</span><span class="pln"><span style="font-family: Menlo; color: black;"> y</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">0</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Works in C# 9</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(<span class="pln"><span style="font-family: Menlo; color: black;">x2</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>var</span><span class="pln"><span style="font-family: Menlo; color: black;"> y3</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="lit"><span style="font-family: Menlo; color: rgb(0, 102, 102);">0</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>1</span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp; &nbsp;</span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Works in C# 10 onwards</span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more in the article on</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/fundamentals/functional/deconstruct" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">deconstruction</span></a>.<o:p></o:p></span></p><h3 id="improved-definite-assignment" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Improved definite assignment</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# produces errors if you use a value that has not been definitely assigned. C# 10 understands your code better and produces less spurious errors. These same improvements also mean you’ll see less spurious errors and warnings for null references.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more about C# definite assignment in the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/whats-new/csharp-10#improved-definite-assignment" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">what’s new in C# 10 article</span></a>.<o:p></o:p></span></p><h3 id="extended-property-patterns" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Extended property patterns</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# 10 adds extended property patterns to make it easier to access nested property values in patterns. For example, if we add an address to the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">Person</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">record above, we can pattern match in both of the ways shown here:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">object</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> obj </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>new</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>FirstName<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Kathleen"</span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>LastName<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Dollard"</span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>new</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>City</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>=</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Seattle"</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>};<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;"><o:p>&nbsp;</o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>if<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="pln"><span style="font-family: Menlo; color: black;">obj </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">is</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pun"><span style="font-family: Menlo; color: black;">:</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>City</span><span class="pun"><span style="font-family: Menlo; color: black;">:</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Seattle"</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>})</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console<span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">WriteLine</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"Seattle"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;"><o:p>&nbsp;</o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>if<span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>(</span><span class="pln"><span style="font-family: Menlo; color: black;">obj </span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">is</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Person</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Address</span><span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">City</span></span><span class="pun"><span style="font-family: Menlo; color: black;">:</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="str"></span><span style="font-family: Menlo; color: rgb(152, 6, 6);"></span>"Seattle"</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>})</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Extended property pattern</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console<span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">WriteLine</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"Seattle"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The extended property pattern simplifies the code and makes it easier to read, particularly when matching against multiple properties.<o:p></o:p></span></p><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more about extended property patterns in the</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/patterns#property-pattern" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">pattern matching article</span></a>.<o:p></o:p></span></p><h3 id="caller-expression-attribute" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.5rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(31, 55, 99); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Caller expression attribute</span><span style="font-size: 13.5pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h3><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">CallerArgumentExpressionAttribute</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">supplies information about the context of a method call. Like the other CompilerServices attributes, this attribute is applied to an optional parameter. In this case, a string:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">void</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>CheckExpression</span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">bool</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> condition</span></span><span class="pun"><span style="font-family: Menlo; color: black;">,</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> <o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>[<span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">CallerArgumentExpression</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"condition"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">)]</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>string</span><span class="pun"><span style="font-family: Menlo; color: black;">?</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> message </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>null</span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>)</span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>Console<span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">WriteLine</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">$</span></span><span class="str"><span style="font-family: Menlo; color: rgb(152, 6, 6);">"Condition: {message}"</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">The parameter name passed to</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span class="typ"><span style="font-size: 11pt; font-family: Menlo; color: rgb(204, 0, 0);">CallerArgumentExpression</span></span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">is the name of a different parameter. The expression passed as the argument to that parameter will be contained in the string. For example,<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">var</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> a </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>6</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>var<span class="pln"><span style="font-family: Menlo; color: black;"> b </span></span><span class="pun"><span style="font-family: Menlo; color: black;">=</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>true</span><span class="pun"><span style="font-family: Menlo; color: black;">;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>CheckExpression<span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">true</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>CheckExpression<span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">b</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>CheckExpression<span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="pln"><span style="font-family: Menlo; color: black;">a </span></span><span class="pun"><span style="font-family: Menlo; color: black;">&gt;</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="lit"></span><span style="font-family: Menlo; color: rgb(0, 102, 102);"></span>5</span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;"><o:p>&nbsp;</o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Output:<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Condition: true<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Condition: b<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="com"></span><span style="font-family: Menlo; color: rgb(0, 136, 0);"></span>// Condition: a &gt; 5<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">A good example of how this attribute can be used is ArgumentNullException.ThrowIfNull(). It avoids have to pass in the parameter name by defaulting it from the provided value:<o:p></o:p></span></p><pre tabindex="0" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 10pt; font-family: &quot;Courier New&quot;; font-stretch: normal; border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom-right-radius: 10px; border-bottom-left-radius: 10px;"><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">void</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>MyMethod</span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">object</span></span><span class="pln"><span style="font-family: Menlo; color: black;"> </span><span class="kwd"></span><span style="font-family: Menlo; color: rgb(30, 30, 255);"></span>value</span><span class="pun"><span style="font-family: Menlo; color: black;">)</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>{<span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pln"><span style="font-family: Menlo; color: black;">&nbsp;&nbsp; &nbsp;</span></span><span class="typ"></span><span style="font-family: Menlo; color: rgb(102, 0, 102);"></span>ArgumentNullException<span class="pun"><span style="font-family: Menlo; color: black;">.</span></span><span class="typ"><span style="font-family: Menlo; color: rgb(102, 0, 102);">ThrowIfNull</span></span><span class="pun"><span style="font-family: Menlo; color: black;">(</span></span><span class="kwd"><span style="font-family: Menlo; color: rgb(30, 30, 255);">value</span></span><span class="pun"><span style="font-family: Menlo; color: black;">);</span></span><span class="pln"><span style="font-family: Menlo; color: black;"><o:p></o:p></span></span></pre><pre style="margin: 0cm 0cm 0.0001pt; font-size: 10pt; font-family: &quot;Courier New&quot;;"><span class="pun"></span><span style="font-family: Menlo; color: black;"></span>}<span style="font-size: 11pt; font-family: Menlo; color: rgb(33, 37, 41);"><o:p></o:p></span></pre><p style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: &quot;Times New Roman&quot;, serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Find out more about</span><span class="apple-converted-space"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">&nbsp;</span></span><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><a href="https://docs.microsoft.com/dotnet/csharp/language-reference/attributes/caller-information#argument-expressions" target="_blank" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">CallerArgumentExpressionAttribute</span></a><o:p></o:p></span></p><h2 id="preview-features" style="margin: 0cm 0cm 0.5rem; break-after: avoid; font-size: 1.75rem; font-family: &quot;Calibri Light&quot;, sans-serif; color: rgb(47, 84, 150); font-weight: normal; caret-color: rgb(51, 51, 51);"><span style="font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">Preview features</span><span style="font-size: 18pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);"><o:p></o:p></span></h2><p class="MsoNormal" style="margin-top: 0cm; margin-right: 0cm; margin-left: 0cm; font-size: 12pt; font-family: Calibri, sans-serif; word-break: break-word; caret-color: rgb(51, 51, 51);"><span style="font-size: 13pt; font-family: &quot;Segoe UI&quot;, serif; color: rgb(51, 51, 51);">C# 10 GA includes<span class="apple-converted-space">&nbsp;</span><em>static abstract members in interfaces</em><span class="apple-converted-space">&nbsp;</span>as a preview feature. Rolling out a preview feature in GA allows us to get feedback on a feature that will take longer than a single release to create.<span class="apple-converted-space">&nbsp;</span><em>Static abstract members in interfaces</em><span class="apple-converted-space">&nbsp;</span>is the basis for a new set of generic math constraints that allow you to abstract over which operators are available. You can read more about<span class="apple-converted-space">&nbsp;</span><a href="https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/" style="color: purple; text-decoration: underline; text-decoration-skip: objects; word-break: break-word;"><span style="color: rgb(0, 93, 166);">generic math constraints in this article</span></a>.<o:p></o:p></span></p><p class="MsoNormal" style="margin: 0cm 0cm 0.0001pt; font-size: 12pt; font-family: Calibri, sans-serif;"><span lang="EN-US" style="color: black;"><o:p>&nbsp;</o:p></span></p><p class="jc" style="margin: 18pt 0cm 0.0001pt; font-size: medium; font-family: &quot;Times New Roman&quot;, serif; caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); line-height: 24pt;"></p><p class="MsoNormal" style="margin: 0cm 0cm 0.0001pt; font-size: 12pt; font-family: Calibri, sans-serif;"><span lang="EN-US" style="color: black;">Source: https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/<o:p></o:p></span></p>