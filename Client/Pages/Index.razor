@page "/"
@using SETraining.Shared.DTOs
@using SETraining.Shared.DTOs
@using System.Net
@using SETraining.Shared.DTOs
@using System.Net
@using Microsoft.EntityFrameworkCore.Diagnostics
@using SETraining.Shared
@using SETraining.Shared.DTOs
@using SETraining.Shared.Models
@using System.ComponentModel.Design
@using System.Text
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<PageTitle>Home</PageTitle>

<RadzenTextBox style="width: 85%; margin-left: 5px;" Placeholder="Search..." @bind-Value=@search @oninput=@(args => searchTitle(args.Value.ToString())) />
<RadzenButton style="width: calc(14% - 5px);" Click=@(() => ClearResult()) Text="Clear" ButtonStyle="ButtonStyle.Light" />


@if(ProgrammingLanguages != null) {
    <div style="height: 30px; width: 100%; margin-top: 10px; margin-bottom: 10px; margin-left: 15px; flex-direction: row">
        <RadzenDropDown style="margin-top: 0px"
                        @bind-Value=@SelectedDifficultyLevel Multiple="false" Placeholder="Difficulty..." Data=@Enum.GetNames(typeof(DifficultyLevel)) TextProperty="Name" ValueProperty="Name"
                        Change=@(args => OnSelectedDifficultyLevel(args))  />
    
        <RadzenDropDown style="margin-top: 0px" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@SelectedProgrammingLanguages Multiple="true" Placeholder="Programming Languages..." Data=@ProgrammingLanguages TextProperty="Name" ValueProperty="Name"
                        Change=@(args => OnSelectedProgrammingLanguages(args))  />
    </div>
 
}



@if (Videos == null && Articles == null)
{
    <div>Loading...</div>
}

@if (Videos != null || Articles != null)
{
    <div style="margin-left: 20px; margin-top: 20px; ">Results: @(Articles.Length + Videos.Length) @(Articles.Length > 0 ? "items" : "item")</div>
       
}



@if (Videos != null)
{
    
                                                             
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Videos" TItem="VideoDTO">
        <Template Context="video">
            <RadzenCard Style="width:300px;">
                            <div class="d-flex flex-row align-items-center">
                                <RadzenImage Path="placeholder_small.jpg" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                                <div>
                                    <h4 class="mb-0">@(video.Title)</h4>
                                    <div>Video</div>
                                    <div style="font-size: .8em">@video.Description</div>
                                    <RadzenRating ReadOnly="true" Stars="5" Value=@(video.AvgRating == null ? 0 : video.AvgRating.Value) />
                                    
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="row">
                                <div class="col-md-8 text-truncate">
                                    @foreach (var l in video.ProgrammingLanguages)
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}")/>
                                    }
                                    @if (video.Difficulty != null)
                                    {
                                       <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", video.Difficulty.Value.ToString())}")/>
                                    }
                                    
                                    
                                    
                                </div>
                                <div class="col-md-4 text-right">
                                    <RadzenButton Text="Watch" Click=@(() => ViewVideo(video)) ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>
                        </RadzenCard>
           
        </Template>
    </RadzenDataList>
    
    
}


@if (Articles != null)
{

    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Articles" TItem="ArticleDTO">
        <Template Context="article">
            <RadzenCard Style="width:300px;">
                            <div class="d-flex flex-row align-items-center">
                                <RadzenImage Path="placeholder_small.jpg" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                                <div>
                                    <h4 class="mb-0">@(article.Title)</h4>
                                    <div>Article</div>
                                    <div style="font-size: .8em">@article.Description</div>
                                    <RadzenRating ReadOnly="true" Stars="5" Value=@(article.AvgRating == null ? 0 : article.AvgRating.Value) />
                                    
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="row">
                                <div class="col-md-8 text-truncate">
                                    @foreach (var l in article.ProgrammingLanguages)
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}")/>
                                    }
                                    
                                    @if (article.Difficulty != null)
                                    {
                                       <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", article.Difficulty.Value.ToString())}")/>
                                    }
                                    
                                    
                                    
                                </div>
                                <div class="col-md-4 text-right">
                                    <RadzenButton Text="Read" Click=@(() => ViewArticle(article)) ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>
                        </RadzenCard>
           
        </Template>
    </RadzenDataList>
    
    
}




@code {
    
    //Properties

    HttpClient anonymous = new ();
    ProgrammingLanguageDTO[]? ProgrammingLanguages;
    IEnumerable<string> SelectedProgrammingLanguages = new List<string>();
    string? SelectedDifficultyLevel;
    
    FilterSetting? filters = new ();
    VideoDTO[]? Videos;
    ArticleDTO[]? Articles;
    DifficultyLevel? DifficultyLevel;
    string search = "";
    
    
    //Methods 
    
    protected override async Task OnInitializedAsync()
    {
        anonymous = _httpClientFactory.CreateClient("SETraining.ServerAPI.Anonymous"); 
        Videos =  await anonymous.GetFromJsonAsync<VideoDTO[]>("api/Video");
        Articles =  await anonymous.GetFromJsonAsync<ArticleDTO[]>("api/Article");
        ProgrammingLanguages = await anonymous.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
    }

    async void ClearResult()
    {
        Videos =  await anonymous.GetFromJsonAsync<VideoDTO[]>("api/Video");
        Articles =  await anonymous.GetFromJsonAsync<ArticleDTO[]>("api/Article");
        search = "";
    }

    async Task searchTitle(string title)
    {
        search = title;
        if (title.Trim() == "")
        {
            ClearResult();
            return;
        }

        var URIParams = BuildURIString(title);

        Articles = await anonymous.GetFromJsonAsync<ArticleDTO[]>($"api/Article/{URIParams}");
        Videos = await anonymous.GetFromJsonAsync<VideoDTO[]>($"api/Video/title={title}");
            
        
    }
    
    
    private void ViewArticle(ArticleDTO article)
    {
        var uri = $"{NavigationManager.BaseUri}ArticleDetails/{article.Id}";

        NavigationManager.NavigateTo(uri);
    }
    
    private void ViewVideo(VideoDTO video)
    {
        var uri = $"{NavigationManager.BaseUri}VideoDetails/{video.Id}";

        NavigationManager.NavigateTo(uri);
    }

    void OnSelectedProgrammingLanguages(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        
        

        foreach (var lang in SelectedProgrammingLanguages)
        {
            Console.WriteLine(lang);
        }
    }
    
    void OnSelectedDifficultyLevel(object value)
    {
       //Console.WriteLine(SelectedDifficultyLevel);
        //Console.WriteLine();
    }

    string BuildURIString(string title)
    {
        var URI = new StringBuilder();
        
        //Add title
        URI.Append("title=");
        URI.Append(title);
        URI.Append("&");
        
        //Add difficultylevel
        URI.Append("difficulty=");
        URI.Append(SelectedDifficultyLevel);
        URI.Append("&");
        
        //Add Programminglanguages 
        foreach (var lang in SelectedProgrammingLanguages)
        {
            URI.Append("languages=");
            URI.Append(lang);
            URI.Append("&");
        }

        return URI.ToString();

    }

}