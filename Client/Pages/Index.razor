@page "/"
@using SETraining.Shared.DTOs
@using SETraining.Shared.Models
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IHttpClientFactory _httpClientFactory

<PageTitle>Home</PageTitle>

<RadzenTextBox style="width: 85%; margin-left: 5px;" Placeholder="Search..." @bind-Value=@searchedTitle @oninput=@(args => Search(args.Value.ToString())) /> 
<RadzenButton style="width: calc(14% - 5px);" Click="ClearResult" Text="Clear" ButtonStyle="ButtonStyle.Light" />

<div style="height: 30px; width: 100%; margin-top: 10px; margin-bottom: 10px; margin-left: 5px; flex-direction: row">
    <RadzenDropDown style="margin-top: 0px"
                    @bind-Value=@SelectedDifficultyLevel Multiple="false" AllowClear="true" Placeholder="Difficulty..." Data=@Enum.GetNames(typeof(DifficultyLevel)) TextProperty="Name" ValueProperty="Name"
                    Change=@(() => OnSelectedDifficultyLevel())  />
    
    @if(ProgrammingLanguages != null) 
    { 
        <RadzenDropDown style="margin-top: 0px" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           @bind-Value=@SelectedProgrammingLanguages Multiple="true" Placeholder="Programming Languages..." Data=@ProgrammingLanguages TextProperty="Name" ValueProperty="Name"
                           Change=@(() => OnSelectedProgrammingLanguages())  />
    }
</div>

@if (Articles == null)
{
    <div>Loading...</div>
}

@if (Articles != null)
{
    <div style="margin-left: 20px; margin-top: 20px; ">Results: @(Articles.Length) articles</div>
}

<div class="w-100 d-flex align-content-around flex-wrap" >
    @if (Articles != null)
    {
        foreach (var article in Articles)
        {
            <RadzenCard class="flex-fill m-2" Style="width:300px;">
                <div class="d-flex flex-row align-items-center">
                    <div style="width: 80px;height: 80px;overflow: hidden; " class="rounded-circle">
                        <img src="@(article.ImageURL ?? "placeholder_small.jpg")"  style="height: 110%;transform: translateX(-50%);margin-left: 50%;" />
                    </div>
                    <div style="margin-left: 10px">
                        <h4 class="mb-0">@(article.Title)</h4>
                        <div>@article.Type.ToString()</div>
                        <div style="font-size: .8em">@article.Description</div>
                    </div>
                </div>
                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;"/>
                <div class="row">
                    <div class="col-md-8 text-truncate">
                        @foreach (var l in article.ProgrammingLanguages)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}") />
                        }
    
                        @if (article.Difficulty != null)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", article.Difficulty.ToString())}") />
                        }
                    </div>
                    <div class="col-md-4 text-right">
                        <RadzenButton Text="@(article.Type == ArticleType.Written ? "Read" : "Show")" Click=@(() => ViewArticle(article)) ButtonStyle="ButtonStyle.Primary" />
                    </div>
                </div>
            </RadzenCard>
        }

        if (Articles.Length == 0)
        {
            <div class="container h-100">
                <div class="d-flex justify-content-md-center align-items-center vh-100">
                    <p>No results matching your search. Try again with other parameters!</p>
                </div>     
            </div> 
        }
    }
</div>

@code {
    HttpClient anonymous = new ();
    ProgrammingLanguageDTO[]? ProgrammingLanguages;
    IEnumerable<string> SelectedProgrammingLanguages = new List<string>();
    string? SelectedDifficultyLevel;
    
    ArticlePreviewDTO[]? Articles;
    DifficultyLevel? DifficultyLevel;
    string searchedTitle = "";

    protected override async Task OnInitializedAsync()
    {
        anonymous = _httpClientFactory.CreateClient("SETraining.ServerAPI.Anonymous"); 
        Articles =  await anonymous.GetFromJsonAsync<ArticlePreviewDTO[]>("api/Article/all");
        ProgrammingLanguages = await anonymous.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
    }

    private async Task ClearResult()
    {
        Articles =  await anonymous.GetFromJsonAsync<ArticlePreviewDTO[]>("api/Article/all");
        searchedTitle = "";
        SelectedDifficultyLevel = null;
        SelectedProgrammingLanguages = new List<string>();
        StateHasChanged();
    }

    private async Task Search(string title)
    {
        try
        {
            searchedTitle = title;
            var URIParams = BuildURIString();
        
            Articles = await anonymous.GetFromJsonAsync<ArticlePreviewDTO[]>($"api/Article{URIParams}");
        }
        catch (Exception)
        {
            Articles = Array.Empty<ArticlePreviewDTO>();
        }
        
        StateHasChanged();
    }

    private void ViewArticle(ArticlePreviewDTO article)
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}ArticleDetails/{article.Id}");
    }
    
    void OnSelectedProgrammingLanguages()
    {
        Search(searchedTitle);
    }
    
    void OnSelectedDifficultyLevel()
    {
        Search(searchedTitle);
    }

    string BuildURIString()
    {
        var URI = new StringBuilder();

        if (searchedTitle.Trim() != "")
        {
            URI.Append("title=");
            URI.Append(searchedTitle);
            URI.Append("&");
        }

        if (SelectedDifficultyLevel != null)
        {
            URI.Append("difficulty=");
            URI.Append(SelectedDifficultyLevel);
            URI.Append("&");
        }

        foreach (var lang in SelectedProgrammingLanguages)
        {
            URI.Append("languages=");
            URI.Append(lang);
            URI.Append("&");
        }

        if (URI.ToString() == "" && SelectedDifficultyLevel == null && SelectedDifficultyLevel != null)
        {
            URI.Insert(0, "/all");
        }
        else
        {
            URI.Insert(0, "?");
            URI.Remove(URI.Length - 1, 1);
        }
        
        return URI.ToString();
    }
}