@page "/"
@using SETraining.Shared.DTOs
@using SETraining.Shared.DTOs
@using System.Net
@using SETraining.Shared.DTOs
@using System.Net
@using Microsoft.EntityFrameworkCore.Diagnostics
@using SETraining.Shared
@using SETraining.Shared.DTOs
@using SETraining.Shared.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<RadzenTextBox style="width: 85%; margin-left: 5px;" Placeholder="Search..." @oninput=@(args => searchTitle(args.Value.ToString())) />
<RadzenButton style="width: calc(14% - 5px);" Click=@(() => ClearResult()) Text="Clear" ButtonStyle="ButtonStyle.Light" />

<TopMenu/>


@if (Videos == null && Articles == null)
{
    <div>Loading...</div>
}

@if (Videos != null || Articles != null)
{
    <div style="margin-left: 20px; margin-top: 20px; ">Results: @(Articles.Length + Videos.Length) @(Articles.Length > 0 ? "items" : "item")</div>
       
}



@if (Videos != null)
{
    
                                                             
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Videos" TItem="VideoDTO">
        <Template Context="video">
            <RadzenCard Style="width:300px;">
                            <div class="d-flex flex-row align-items-center">
                                <RadzenImage Path="placeholder_small.jpg" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                                <div>
                                    <h4 class="mb-0">@(video.Title)</h4>
                                    <div>Video</div>
                                    <div style="font-size: .8em">@video.Description</div>
                                    <RadzenRating ReadOnly="true" Stars="5" Value=@(video.AvgRating == null ? 0 : video.AvgRating.Value) />
                                    
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="row">
                                <div class="col-md-8 text-truncate">
                                    @foreach (var l in video.ProgrammingLanguages)
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}")/>
                                    }
                                    @if (video.Difficulty != null)
                                    {
                                       <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", video.Difficulty.Value.ToString())}")/>
                                    }
                                    
                                    
                                    
                                </div>
                                <div class="col-md-4 text-right">
                                    <RadzenButton Text="Watch" ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>
                        </RadzenCard>
           
        </Template>
    </RadzenDataList>
    
    
}


@if (Articles != null)
{

    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Articles" TItem="ArticleDTO">
        <Template Context="article">
            <RadzenCard Style="width:300px;">
                            <div class="d-flex flex-row align-items-center">
                                <RadzenImage Path="placeholder_small.jpg" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                                <div>
                                    <h4 class="mb-0">@(article.Title)</h4>
                                    <div>Article</div>
                                    <div style="font-size: .8em">@article.Description</div>
                                    <RadzenRating ReadOnly="true" Stars="5" Value=@(article.AvgRating == null ? 0 : article.AvgRating.Value) />
                                    
                                </div>
                            </div>
                            <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                            <div class="row">
                                <div class="col-md-8 text-truncate">
                                    @foreach (var l in article.ProgrammingLanguages)
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", l)}")/>
                                    }
                                    
                                    @if (article.Difficulty != null)
                                    {
                                       <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", article.Difficulty.Value.ToString())}")/>
                                    }
                                    
                                    
                                    
                                </div>
                                <div class="col-md-4 text-right">
                                    <RadzenButton Text="Watch" ButtonStyle="ButtonStyle.Primary" />
                                </div>
                            </div>
                        </RadzenCard>
           
        </Template>
    </RadzenDataList>
    
    
}




@code {



    async void ClearResult()
    {
        Videos = await Http.GetFromJsonAsync<VideoDTO[]>("api/Video");
    }

    public FilterSetting? filter = new FilterSetting();
    public VideoDTO[]? Videos;
    public ArticleDTO[]? Articles;
    DifficultyLevel? DifficultyLevel;

    async Task searchTitle(string title)
    {
        if (title == "")
        {
            ClearResult();
            return;
        }
            
            Videos = await Http.GetFromJsonAsync<VideoDTO[]>("api/Video", DifficultyLevel.Value.ToString(),  );
            
        
    }

    void OnChange(string value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }
    
    protected override async Task OnInitializedAsync()
    {
        Videos =  await Http.GetFromJsonAsync<VideoDTO[]>("api/Video");
        Articles =  await Http.GetFromJsonAsync<ArticleDTO[]>("api/Article");
    }
    
}