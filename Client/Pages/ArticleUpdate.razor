@page "/UpdateArticle/{articleId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SETraining.Shared.DTOs
@using SETraining.Shared.ExtensionMethods
@using SETraining.Shared.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="row">
    <div class="col-12">
        <RadzenButton style="right:0px; position: absolute;" Click=@(() => Back()) Text="Go Back" ButtonStyle="ButtonStyle.Secondary" />
        <h1>Edit article</h1>
        <h4>Title</h4>
        <RadzenTextBox Value="@TitleInput" Change=@(args => OnTitleChange(args.ToString())) />
        <h4>Description</h4>
        <RadzenTextBox Value="@DescriptionInput" Change=@(args => OnDescriptionChange(args.ToString())) />

        @if (ProgrammingLanguages != null)
        {
            <div style="margin-top: 20px;">
                <h4>Choose existing languages</h4>
                <RadzenCheckBoxList @bind-Value=@ChosenLanguages TValue="int" Orientation="Orientation.Horizontal" Change=@(args => OnChooseLanguages(args))>
                    <Items>
                        @foreach (var (language, i) in ProgrammingLanguages.Select((value, i) => (value, i)))
                        {
                            <RadzenCheckBoxListItem Text="@language.Name" Value="@i"/>
                        }
                    </Items>
                </RadzenCheckBoxList>

                <div style="margin-top: 10px;">Or add new language</div>
                <RadzenTextBox Placeholder="Typescript..." Change=@(args => OnNewLanguageValue(args)) Class="w-100" />
                <RadzenButton Click=@(args => OnAddLanguage()) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
            </div>
        }

        <div style="margin-top: 20px;">
            <h4>Pick difficulty level</h4>
            <RadzenRadioButtonList @bind-Value=@ChosenDifficulty TValue="int" Change=@(args => OnChosenDifficultyLevelChange(args))>
                <Items>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Novice.ToString()" Value="0"/>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Intermediate.ToString()" Value="1"/>
                    <RadzenRadioButtonListItem Text="@DifficultyLevel.Expert.ToString()" Value="2"/>
                </Items>
            </RadzenRadioButtonList>
        </div>

        <div class="form-group">
            @if (!string.IsNullOrWhiteSpace(imageUrl))
            {
                <div><img src="@imageUrl" alt="Character Image" class="img-thumbnail"></div>
            }
            <h4 style="margin-top: 20px;">Add image</h4>
            <label for="Image">Image</label>
        </div>
        <div class="form-group input-group">
            <InputFile id="Image" OnChange="@OnFileSelection" class="form-control" />
            <button type="button" @onclick="ClearImage" class="btn btn-secondary">Clear</button>
        </div>


        <div style="margin-top: 20px;">
            <h4>Content of the article</h4>
            <RadzenHtmlEditor @bind-Value=@HtmlInput style="height: 500px; margin-bottom: 1rem;" UploadUrl="upload/image" Change=@OnHtmlChange Paste=@OnPaste Execute=@OnExecute />
        </div>
        
    </div>
  
</div>
<div style="position:relative">
    <RadzenButton style="margin-bottom:10px;"Click=@(UpdateArticle) Text="Edit" Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton style="margin-bottom:10px; right:0px; position: absolute ;"Click=@(DeleteArticle) Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
</div>

  
        

        

@code {
    //***Properties*** 
    private string imageName = Guid.NewGuid().ToString();

    private string imageUrl = string.Empty;

    private IBrowserFile? imageFile;
    
    string HtmlInput;
    string TitleInput;
    string DescriptionInput;
    
    bool? checkBoxValue;
    string? newLang;
    
    public ArticleDTO? article;
    [Parameter]
    public int ArticleId { get; set; }
    
    ProgrammingLanguageDTO[]? ProgrammingLanguages;
    IEnumerable<int> ChosenLanguages = new List<int>();
    int ChosenDifficulty = 0;
    
    //***Methods***
    
    //Init method
    protected override async Task OnInitializedAsync()
    {
        ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
        article = await Http.GetFromJsonAsync<ArticleDTO>($"api/Article/id={ArticleId}");
        HtmlInput = article.Body;
        TitleInput = article.Title;
        DescriptionInput = article.Description;
        ChosenDifficulty = (int) article.Difficulty;
        onLoadedProgrammingLanguages();
    }

    void onLoadedProgrammingLanguages()
    {
        var ProgrammingLanguagesToStrings = ProgrammingLanguages.Select(p => p.Name).ToList();
        var temp = new List<int>();
        foreach (var l in article.ProgrammingLanguages)
        {
           var i =  ProgrammingLanguagesToStrings.IndexOf(l);
            temp.Add(i);
        }
        ChosenLanguages = temp;
    }

    //Methods for image uploads
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        imageFile = e.GetMultipleFiles().FirstOrDefault();

        if (imageFile != null)
        {
            var bytes = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(bytes);
            var contentType = imageFile.ContentType;
            imageUrl = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";
        }
    }
    
    private async Task UploadImage()
    {
    //IMAGE UPLOAD 
        
        if (imageFile != null)
        {
            var bytes = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(bytes);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new MediaTypeHeaderValue(imageFile.ContentType);
            var content = new MultipartFormDataContent();
            content.Add(byteContent, "file", imageFile.Name);
            var response = await Http.PostAsync($"api/images/{imageName}", content);

            if (response.IsSuccessStatusCode)
            {
                var ImageUrl = response.Headers.Location?.ToString();
            }
        }
    }

    private void ClearImage()
    {
        imageUrl = string.Empty;
        imageFile = null;
    }
    
    //HTML Editor and required properties
    
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        // console.Log($"Paste: {args.Html}");
    }
    
    void OnTitleChange(string title)
    {
    // console.Log($"Change: {html}");
        TitleInput = title;
    }
    
    void OnDescriptionChange(string description)
    {
    // console.Log($"Change: {html}");
        DescriptionInput = description;
    }
    
    void OnHtmlChange(string html)
    {
    // console.Log($"Change: {html}");
        HtmlInput = html;
    }
    
    void OnChosenDifficultyLevelChange(int value)
    {
        ChosenDifficulty = value;
    }
    
    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        // console.Log($"Execute: {args.CommandName}");
    }
    
    void OnChooseLanguages(IEnumerable<int> value)
    {
        ChosenLanguages = value;
    }
    
    //Add new language
    private async Task OnAddLanguage()
    {
        if (newLang == null || newLang.Trim() == "")
        {
            return;
        }
        
        var langToPost = new ProgrammingLanguageCreateDTO
        {
            Name = newLang
        };
        
        var response = await Http.PostAsJsonAsync("api/ProgrammingLanguages", langToPost);
        
        if (response.IsSuccessStatusCode)
        {
            ProgrammingLanguages = await Http.GetFromJsonAsync<ProgrammingLanguageDTO[]>("api/ProgrammingLanguages");
        }
    }

    void OnNewLanguageValue(string val)
    {
        newLang = val;
    }

    //Update article
    private async Task UpdateArticle()
    {
        
        var article = new ArticleCreateDTO
        {
            Body = HtmlInput,
            Title = TitleInput,
            Description = DescriptionInput,
            ProgrammingLanguages = ChosenLanguages.Select(lang => ProgrammingLanguages[lang].Name).ToList(),
            Difficulty = (DifficultyLevel) ChosenDifficulty
            
        };
        
        var response = await Http.PutAsJsonAsync($"api/Article/{ArticleId}", article);
        if (response.IsSuccessStatusCode)
        {

            var uri = $"{NavigationManager.BaseUri}ArticleDetails/{ArticleId}";

            NavigationManager.NavigateTo(uri);
        }
    }

    private async Task DeleteArticle()
    {
        var response = await Http.DeleteAsync($"api/Article/{ArticleId}");
        if (response.IsSuccessStatusCode)
        {
            var uri = $"{NavigationManager.BaseUri}/";
            NavigationManager.NavigateTo(uri);
        }
    }

    private void Back()
    {
        var uri = $"{NavigationManager.BaseUri}ArticleDetails/{ArticleId}";

        NavigationManager.NavigateTo(uri);
    }
    
}
